/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Qwerty from '../model/Qwerty';

/**
* Qwerty service.
* @module api/QwertyApi
* @version 1.0.0
*/
export default class QwertyApi {

    /**
    * Constructs a new QwertyApi. 
    * @alias module:api/QwertyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createqwerty operation.
     * @callback module:api/QwertyApi~createqwertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Qwerty} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Qwerty} qwerty data to be created
     * @param {module:api/QwertyApi~createqwertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Qwerty}
     */
    createqwerty(qwerty, callback) {
      let postBody = qwerty;
      // verify the required parameter 'qwerty' is set
      if (qwerty === undefined || qwerty === null) {
        throw new Error("Missing the required parameter 'qwerty' when calling createqwerty");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Qwerty;
      return this.apiClient.callApi(
        '/qwerty', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteqwerty operation.
     * @callback module:api/QwertyApi~deleteqwertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} qwertyId the Id parameter
     * @param {module:api/QwertyApi~deleteqwertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteqwerty(qwertyId, callback) {
      let postBody = null;
      // verify the required parameter 'qwertyId' is set
      if (qwertyId === undefined || qwertyId === null) {
        throw new Error("Missing the required parameter 'qwertyId' when calling deleteqwerty");
      }

      let pathParams = {
        'qwertyId': qwertyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/qwerty/{qwertyId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllqwerty operation.
     * @callback module:api/QwertyApi~getAllqwertyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Qwerty>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/QwertyApi~getAllqwertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Qwerty>}
     */
    getAllqwerty(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Qwerty];
      return this.apiClient.callApi(
        '/qwerty/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getqwerty operation.
     * @callback module:api/QwertyApi~getqwertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Qwerty} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} qwertyId the Id parameter
     * @param {module:api/QwertyApi~getqwertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Qwerty}
     */
    getqwerty(qwertyId, callback) {
      let postBody = null;
      // verify the required parameter 'qwertyId' is set
      if (qwertyId === undefined || qwertyId === null) {
        throw new Error("Missing the required parameter 'qwertyId' when calling getqwerty");
      }

      let pathParams = {
        'qwertyId': qwertyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Qwerty;
      return this.apiClient.callApi(
        '/qwerty/{qwertyId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateqwerty operation.
     * @callback module:api/QwertyApi~updateqwertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Qwerty} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} qwertyId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Qwerty} opts.qwerty data to be updated
     * @param {module:api/QwertyApi~updateqwertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Qwerty}
     */
    updateqwerty(qwertyId, opts, callback) {
      opts = opts || {};
      let postBody = opts['qwerty'];
      // verify the required parameter 'qwertyId' is set
      if (qwertyId === undefined || qwertyId === null) {
        throw new Error("Missing the required parameter 'qwertyId' when calling updateqwerty");
      }

      let pathParams = {
        'qwertyId': qwertyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Qwerty;
      return this.apiClient.callApi(
        '/qwerty/{qwertyId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
